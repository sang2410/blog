pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment {
        SONAR_HOME = tool "sonar-scanner"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git: Code Checkout') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/sang2410/blog.git'
                }
            }
        }

        stage("Trivy: Filesystem scan") {
            steps {
                dir('backend') {
                    sh 'trivy fs . > trivy-backend.txt'
                }
            }
        }

        // stage("OWASP: Dependency check") {
        //     steps {
        //         dir('backend') {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report-backend.xml'
        //         }
        //     }
        // }

        // stage('Sonarqube Analysis') {
        //     steps {
        //         dir('backend') {
        //             withSonarQubeEnv('Sonar-server') {
        //                 sh ''' $SONAR_HOME/bin/sonar-scanner \
        //                 -Dsonar.projectName=backend \
        //                 -Dsonar.projectKey=backend '''
        //             }
        //         }
        //     }
        // }

        // stage('Quality Check') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-cred'
        //         }
        //     }
        // }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t backend .'
                    }
                }
            }
        }
         stage("ECR Image Pushing") {
            steps {
                withAWS(credentials: 'aws-creds') {
                    script {
                        sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 820242930688.dkr.ecr.us-east-1.amazonaws.com'
                        sh 'docker tag backend:latest 820242930688.dkr.ecr.us-east-1.amazonaws.com/backend:latest'
                        sh 'docker push 820242930688.dkr.ecr.us-east-1.amazonaws.com/backend:latest'
                }
                }
                
            }
        }
    }

    // post {
    //     always {
    //         archiveArtifacts artifacts: '**/dependency-check-report-*.xml', followSymlinks: false
    //     }
    // }
}
